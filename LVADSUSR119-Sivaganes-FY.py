# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wJ_gCOvXYTxPMP3YV4DlRzVCz6yUZ7NG
"""

#1
import pandas as pd
import numpy as np

walmart_data = pd.read_excel('/content/Walmart_Dataset Python_Final_Assessment.xlsx')
df= pd.DataFrame(walmart_data)

print("Number of rows:", df.shape[0])
print("Number of columns:", df.shape[1])

print("\nData types:")
print(df.dtypes)

print("\nSummary statistics:")
print(df.describe())

print("\nThree quartiles:")
print(df.quantile([0.25, 0.5, 0.75]))

print("\nMissing values:")
print(df.isna().sum())

# 2
import pandas as pd

walmart_data = pd.read_excel('/content/Walmart_Dataset Python_Final_Assessment.xlsx')
df= pd.DataFrame(walmart_data)

print("Missing values before handling:")
print(df.isna().sum())


categorical = df.select_dtypes(include='object').columns
numerical = df.select_dtypes(include='float64').columns

df[numerical] = df[numerical].fillna(df[numerical].mean())
df[categorical] = df[categorical].fillna(df[categorical].mode().iloc[0])

duplicate_rows = df[df.duplicated()]
print("\nNumber of duplicate entries:", len(duplicate_rows))


df = df.drop_duplicates()

print("\nMissing values after handling:")
print(df.isna().sum())

# 3
numerical = df.select_dtypes(include='float64').columns

mean = df[numerical].mean()

median = df[numerical].median()

mode = df[numerical].mode().iloc[0]

range = df[numerical].max() - df.min()

variance = df[numerical].var()

std_deviation= df[numerical].std()

descriptive_stats = pd.DataFrame({
    'Mean': mean,
    'Median': median,
    'Mode': mode,
    'Range': range,
    'Variance': variance,
    'Standard Deviation': std_deviation
})
print(descriptive_stats)

# 4
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.histplot(df['Sales'], bins=20, kde=True)
plt.title('Distribution of sales')
plt.xlabel('Amount of sales')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Sales', y='Profit', data=df)
plt.title('Relationship between sales and profit')
plt.xlabel('Amount of sales')
plt.ylabel('Amount of profit')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x='Category', y='Profit', data=df)
plt.title('Distribution of profit by category')
plt.xlabel('Category')
plt.ylabel('Amount of profit')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(x='Category', data=df)
plt.title('Count of orders by category')
plt.xlabel('Category')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

# 5
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")

correlation_matrix = df.corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f")
plt.title('Heatmap for correlation')
plt.show()

# 6
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 8))
sns.boxplot(data=df)
plt.title('Identification of outliers')
plt.show()

# 7 (i) and (ii)
df['Order Date'] = pd.to_datetime(df['Order Date'])

df['Year'] = df['Order Date'].dt.year

yearly_data = df.groupby('Year').agg({'Sales': 'sum', 'Profit': 'sum'}).reset_index()

plt.figure(figsize=(12, 6))
sns.lineplot(x='Year', y='Sales', data=yearly_data, label='Sales')
sns.lineplot(x='Year', y='Profit', data=yearly_data, label='Profit')
plt.title('Trends of Sales and Profit Over the Years')
plt.xlabel('Year')
plt.ylabel('Amount')
plt.legend()
plt.show()

category_sales = df.groupby(['Year', 'Category']).agg({'Sales': 'sum'}).reset_index()
category_growth = category_sales.pivot_table(index='Year', columns='Category', values='Sales', aggfunc='sum').reset_index()
category_growth['Total'] = category_growth.sum(axis=1)
category_growth['Growth_Category'] = category_growth.iloc[:, 1:].diff(axis=1).idxmax(axis=1)
most_growth_category = category_growth[['Year', 'Growth_Category']]
print("Product category with the most growth in terms of sales over the years:")
print(most_growth_category)

top_cust_orders = df['EmailID'].value_counts().nlargest(5)
top_cust_sales = df.groupby('EmailID')['Sales'].sum().nlargest(5)

print("Top 5 customers based on the number of orders placed:")
print(top_cust_orders)
print("\nTop 5 customers based on total sales generated:")
print(top_cust_sales)

top_cust_data = df[df['EmailID'].isin(top_cust_orders.index)]
top_cust_behavior = top_cust_data.groupby('EmailID').agg({'Sales': 'sum', 'Quantity': 'sum', 'Profit': 'sum'}).reset_index()
print("\nBuying behavior of top customers:")
print(top_cust_behavior)

repeat_purchase_data = df.groupby(['EmailID', df['Order Date'].dt.date]).size().reset_index(name='OrderCount')
repeat_purchase_data['Order Date'] = pd.to_datetime(repeat_purchase_data['Order Date'])

repeat_purchase_interval = repeat_purchase_data.groupby('EmailID')['Order Date'].apply(lambda x: x.diff().mean())
print("\nAverage time between orders for each customer:")
print(repeat_purchase_interval)

"""# 7(iii)

Optimizing the Supply Chain:

We have to analyze the velocity of the sales to identify the fast-moving products and slow-moving products. The, give priority to inventory management and supply chain activities for fast-moving products. For slow-moving products, we have to adjust inventory levels or offer promotions to keep the demand high

Analyze the order fulfillment data to identify the inefficiencies in the supply chain. We have to optimize the warehouse layout and operations to minimize order processing time. We have implement internet of things(IOT) product such as RFID or barcode scanning for inventory tracking and improved order accuracy. Strengthen relationships with reliable suppliers.

ii. Geographic Distribution of Sales:

Identifying Factors: Analyze geographic distribution of sales to identify underlying factors such as population density, income level, cultural choices, and competition. We have to conduct market research and surveys to gain insights into entry level customers.

Targeted Marketing Strategies: Use insights from geographic distribution of sales to improve the marketing strategies for the specific regions. We have to develop advertising campaigns, promotions, and product offerings that goes well with the targeted audience in each geographical area. We can deliver personalized messages to customers based on their location to increase the relevancy.

iii. Predictors of High-Value Customers:

Analyzing Customer Data: We have to analyze the customer data to identify patterns of the high-value customers.Then after analysing, look for factors such as frequency of the purchase,value of the order, product preferences. We can even calculate the loyalty of the high value customer by taking the year of travel and value of the orders for that particular customer.

Enhancing Customer Loyalty and Acquisition:
Personalized Marketing: Develop personalized marketing campaigns and offers tailored to the preferences and behaviors of high-value customers. We can use data analytics techniques to target these customers with more relevant promotions and recommendations.
We can Offer exclusive benefits, discounts, or rewards to increase customer retention.
Customer Service: We have to provide a better customer service to high-value customers which includes fast response time, personalized assistance, and proactive communication. These are impleted to enhance customer satisfaction.
"""

# 7(iii)
df['TimeforOrder_Delivery'] = df['Ship Date'] - df['Order Date']
average_time_for_order_and_delivery = df.groupby('Category')['TimeforOrder_Delivery'].mean()
print(average_time_for_order_and_delivery)

df['TimeforOrder_Delivery'] = df['Ship Date'] - df['Order Date']
average_time_for_order_and_delivery = df.groupby('EmailID')['TimeforOrder_Delivery'].mean()
print(average_time_for_order_and_delivery.mean())
customer_order_amounts = df.groupby('EmailID')['Sales'].sum().reset_index()

top_10_percent = int(len(customer_order_amounts) * 0.1)
high_value_customers = customer_order_amounts.nlargest(top_10_percent, 'Sales')
print(high_value_customers)

customer_order_amounts = df.groupby('EmailID')['Quantity'].sum().reset_index()

top_10_percent = int(len(customer_order_amounts) * 0.1)
high_value_customers = customer_order_amounts.nlargest(top_10_percent, 'Quantity')
print(high_value_customers)