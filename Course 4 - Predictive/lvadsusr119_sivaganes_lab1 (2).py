# -*- coding: utf-8 -*-
"""lvadsusr119_Sivaganes_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A9DnBZpD4yy_edYjNFQIYTt8kZnbAxmP
"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler,LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.impute import SimpleImputer
from sklearn.metrics import accuracy_score, precision_score, recall_score, classification_report
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('/content/winequality-red.csv')
data

data.isnull().sum()

data_fill = data.fillna(data.mean())
data_fill.isnull().sum()

plt.figure(figsize=(10,8))
sns.boxplot(data=data_fill)
plt.title('Finding outliers')
plt.show()

q1 = data.quantile(0.25)
q3 = data.quantile(0.75)
iqr = q3 - q1

outliers = ((data < (q1 - 1.5 * iqr)) | (data > (q3 + 1.5 * iqr))).any(axis=1)

cleaned_data = data[~outliers]
cleaned_data.head()

plt.figure(figsize=(10,8))
sns.boxplot(data=cleaned_data)
plt.title('After cleaning outliers')
plt.show()

def wine_quality(quality):
    if quality in range(3, 7):
        return 0
    elif quality in [7, 8]:
        return 1

data_fill['label'] = data_fill['quality'].apply(wine_quality)

data_fill.drop(columns=['quality'], inplace=True)

print(data_fill['label'].value_counts())

label_encoder = LabelEncoder()
data['quality'] = label_encoder.fit_transform(data['quality'])

x = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides',
            'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol']
y = 'quality'
X = data[x]
y = data[y]


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

imputer = SimpleImputer(strategy='mean')
X_train_imputed = imputer.fit_transform(X_train)
X_test_imputed = imputer.transform(X_test)

sc = StandardScaler()
X_train_scaled = sc.fit_transform(X_train_imputed)
X_test_scaled = sc.transform(X_test_imputed)

classifier = RandomForestClassifier(random_state=42)
classifier.fit(X_train_scaled, y_train)

y_pred = classifier.predict(X_test_scaled)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

precision = precision_score(y_test, y_pred, average='weighted')
print("Precision:", precision)

recall = recall_score(y_test, y_pred,average='macro')
print("Recall:", recall)

print("Classification Report:")
print(classification_report(y_test, y_pred))