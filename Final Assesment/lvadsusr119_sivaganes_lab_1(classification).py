# -*- coding: utf-8 -*-
"""lvadsusr119-Sivaganes-Lab-1(Classification).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YalPGgLGeGGPF-U_iB8hJ22ILfbaGnWi
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,precision_score,recall_score,classification_report, confusion_matrix

df = pd.read_csv('/content/loan_approval.csv')
data = pd.DataFrame(df)
data

data.isnull().sum()

data.shape

plt.figure(figsize=(10,8))
sns.boxplot(data=data)
plt.title('Finding outliers')
plt.show()

q1 = data.quantile(0.25)
q3 = data.quantile(0.75)
iqr = q3 - q1

outliers = ((data < (q1 - 1.5 * iqr)) | (data > (q3 + 1.5 * iqr))).any(axis=1)
print(outliers)

cleaned_data = data[~outliers]
cleaned_data.shape

plt.figure(figsize=(10,8))
sns.boxplot(data=cleaned_data)
plt.title('After cleaning outliers')
plt.show()

df.info()

categorical_cols = [' education', ' self_employed']
plt.figure(figsize=(12, 6))
for i, col in enumerate(categorical_cols, 1):
    plt.subplot(1, 2, i)
    sns.countplot(x=col, hue=' loan_status', data=cleaned_data)
    plt.title(f'Relationship between {col} and Loan Approval Status')
plt.tight_layout()
plt.show()

numerical_cols = [' income_annum', ' loan_amount', ' cibil_score', ' residential_assets_value', ' commercial_assets_value', ' luxury_assets_value', ' bank_asset_value']
data[numerical_cols].hist(figsize=(12, 8))
plt.suptitle('Distribution of Numerical Features')
plt.show()

data1 = pd.get_dummies(cleaned_data, columns=[' education', ' self_employed'])

data1.head()

X = data1.drop(columns=[' loan_status'])
y = data1[' loan_status']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

print(data1.describe())

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

y_pred = model.predict(X_test_scaled)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))